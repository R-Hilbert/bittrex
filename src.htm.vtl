<!DOCTYPE html>
<title>Market Summaries</title>
<style>
	td+td{border-left:1px solid}
	table{border-collapse:collapse}
	tbody>tr:nth-child(odd){background-color:silver}
</style>
<input autofocus type=search>
<table>
	<thead>
		<tr>
			<th>Market Name
			<th>Gain
			<th>High
			<th>Low
			<th>Last
			<th>Previous Day
			<th>Volume
			<th>Base Volume
			<th>Bid
			<th>Ask
			<th>Buys
			<th>Sells
			<th>Time Stamp
			<th>Created
	<tbody>
#foreach($result in $input.path('$.result'))
#set($gain = ($result.Last - $result.PrevDay) / $result.PrevDay)
		<tr>
			<td>$result.MarketName
			<td>$gain
			<td>$result.High
			<td>$result.Low
			<td>$result.Last
			<td>$result.PrevDay
			<td>$result.Volume
			<td>$result.BaseVolume
			<td>$result.Bid
			<td>$result.Ask
			<td>$result.OpenBuyOrders
			<td>$result.OpenSellOrders
			<td>$result.TimeStamp
			<td>$result.Created
#end
</table>
<script>
	"use strict"
	Array.prototype.sort = function(compareFunction){
		let index = 0
		for(const element of sort(compareFunction, this)) this[index++] = element
		return this
	}
	for(const td of document.getElementsByTagName("td")) if(+td.textContent) td.textContent = (+td.textContent).toLocaleString("fullwide",{useGrouping:false,maximumFractionDigits:20})

	const INPUT = document.querySelector("input")
	const TBODY = document.querySelector("tbody")
	const ROWS = [...TBODY.rows]

	INPUT.oninput = function(){
		const searches = this.value.trim().toUpperCase().split(/[^-\w]+/)
		TBODY.innerHTML = ""
		for(const row of ROWS){
			const text = row.cells[0].textContent.trim()
			const index = text.indexOf("-")
			const market1 = text.substring(0, index)
			const market2 = text.substring(index + 1)
			const matches = ["", text, market1, market2, market2 + "-" + market1]
			loops: for(const search of searches) for(const match of matches) if(search === match){
				TBODY.appendChild(row)
				break loops
			}
		}
	}
	for(const th of document.getElementsByTagName("th")) th.onclick = function(){
		const index = this.cellIndex
		let sorted = true
		for(let i = ROWS.length - 2; i >= 0; --i){
			if(compare(ROWS[i].cells[index].textContent, ROWS[i+1].cells[index].textContent) > 0){
				sorted = false
				break
			}
		}
		if(sorted) ROWS.reverse()
		else ROWS.sort((a, b) => compare(a.cells[index].textContent, b.cells[index].textContent))
		INPUT.oninput()
	}

	function compare(a,b){
		const numA = +a
		const numB = +b
		if(!isNaN(numA)) a = numA
		if(!isNaN(numB)) b = numB
		if(a<b) return -1
		if(a>b) return 1
		return 0
	}
	function*sort(compareFunction, arrayLikeObject, start = 0, end = arrayLikeObject.length){
		if(start >= end) return
		if(end - start <= 1) yield*merge(compareFunction, [arrayLikeObject[start]])
		else yield*merge(compareFunction,
			sort(compareFunction, arrayLikeObject, start, Math.trunc((start+end)/2)),
			sort(compareFunction, arrayLikeObject, Math.trunc((start+end)/2), end)
		)
	}
	function*merge(compareFunction, ...iterables){
		const generators = iterables.map(iterable => {
			const generator = function*(it){yield*it}(iterable)
			const next = generator.next()
			generator.done = next.done
			generator.value = next.value
			return generator
		}).filter(gen => !gen.done || gen.value !== undefined)

		while(generators.length){
			generators[0].index = 0
			const min = generators.reduce((min, current, index) => {
				current.index = index
				return compareFunction(min.value, current.value) > 0 ? current : min
			})
			yield min.value
			const next = min.next()
			min.done = next.done
			min.value = next.value
			if(min.done && min.value === undefined) generators.splice(min.index, 1)
		}
	}
</script>
